:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list)).
:- modeb(*,f(+list)).
:- modeb(*,sum(+element,+element,-element)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
:- determination(f/2,sum/3).
:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.

my_append(A,B,C):-
    append(A,[B],C).





c_0(0).
c_1(1).
c_2(2).
c_3(3).
c_4(4).
c_5(5).
c_6(6).
c_7(7).
c_8(8).
c_9(9).
c_10(10).
c_11(11).
c_12(12).
c_13(13).
c_14(14).
c_15(15).
c_16(16).
c_17(17).
c_18(18).
c_19(19).
c_20(20).
c_21(21).
c_22(22).
c_23(23).
c_24(24).
c_25(25).
c_26(26).
c_27(27).
c_28(28).
c_29(29).
c_30(30).
c_31(31).
c_32(32).
c_33(33).
c_34(34).
c_35(35).
c_36(36).
c_37(37).
c_38(38).
c_39(39).
c_40(40).
c_41(41).
c_42(42).
c_43(43).
c_44(44).
c_45(45).
c_46(46).
c_47(47).
c_48(48).
c_49(49).
c_50(50).
c_51(51).
c_52(52).
c_53(53).
c_54(54).
c_55(55).
c_56(56).
c_57(57).
c_58(58).
c_59(59).
c_60(60).
c_61(61).
c_62(62).
c_63(63).
c_64(64).
c_65(65).
c_66(66).
c_67(67).
c_68(68).
c_69(69).
c_70(70).
c_71(71).
c_72(72).
c_73(73).
c_74(74).
c_75(75).
c_76(76).
c_77(77).
c_78(78).
c_79(79).
c_80(80).
c_81(81).
c_82(82).
c_83(83).
c_84(84).
c_85(85).
c_86(86).
c_87(87).
c_88(88).
c_89(89).
c_90(90).
c_91(91).
c_92(92).
c_93(93).
c_94(94).
c_95(95).
c_96(96).
c_97(97).
c_98(98).
c_99(99).
c_100(100).
:-end_bg.
:-begin_in_pos.
f([92, 13, 27, 21, 38, 99, 69, 66, 95, 68, 32, 62, 18, 59, 16, 58, 25, 11, 25, 25, 59, 99, 81, 93, 85, 66, 57, 68, 72, 62, 39, 25, 59, 33, 75, 92, 15, 63, 98, 67, 95, 59, 100, 70, 6, 40, 4],2601).
f([13, 97, 86, 101, 2, 34, 16, 80, 42, 44, 99, 14, 47, 61, 42, 31, 83, 70, 100, 64, 46, 23, 83, 12, 14, 33, 2, 78, 50, 98, 18, 22, 29, 100],1734).
f([74, 14, 70, 44, 7, 48, 43, 9, 46, 30, 19, 68, 87, 37, 94, 20, 29, 90, 90, 47, 1, 89, 44, 18, 66, 55, 62, 62, 100, 28, 101, 45, 28, 81, 97, 50, 49, 87, 77, 57, 76, 93, 29, 38, 36, 48],2483).
f([80, 82, 42, 43, 49, 87, 37, 59, 44, 52, 24, 32, 70, 42, 33, 58, 94, 26, 55, 4, 62, 55, 89, 19, 93, 61, 96, 52, 57, 31, 53, 51, 70, 20, 100],1922).
f([26, 50, 73, 34, 87, 74, 66, 75, 3, 50, 44, 43, 16, 38, 79, 61, 67, 38, 81, 91, 63, 90, 71, 31, 49, 15, 44, 90, 17, 63, 23, 48, 58, 79, 23, 69],1929).
f([48, 90, 35, 70, 82, 21, 47, 100, 29, 34, 12, 9, 100, 65, 99, 46, 1, 41, 83, 21, 64, 53, 24, 36, 78, 94, 6, 50, 23, 6, 38, 97, 79, 97, 18, 78, 24, 48, 6, 92, 47, 21],2112).
f([69, 65, 18, 64, 7, 81, 89, 99, 91, 72, 90, 47, 34, 7, 15, 12, 101, 23, 21, 47, 38, 98, 61, 64, 75, 6, 45, 53],1492).
f([5, 55, 18, 1, 20, 76, 16, 101, 21, 77, 97, 9, 86, 57, 38, 18, 11, 19, 100, 94, 65, 11, 10, 82, 38, 81, 92, 7, 67, 4],1376).
f([3, 62, 44, 85, 55, 19, 96, 100, 25, 10, 59, 36, 8, 71],673).
f([101, 82, 52, 83, 95, 7, 61, 49, 68, 85, 22, 90, 101, 28, 31, 99, 68, 48, 85, 9, 52, 94, 49, 92, 91, 95, 99, 22, 11, 38, 89],1996).
f([83, 32],115).
f([76, 83, 96, 93, 30],378).
f([67, 63, 7, 72, 22, 23, 20, 26, 58],358).
f([52, 12, 15, 92, 30, 99, 83, 21, 86, 29, 67, 92, 19, 55, 11, 95, 21, 45, 87, 100, 81, 49, 75, 87, 97, 21, 16, 90, 72, 27, 77, 43, 34, 42, 25, 97, 20, 18, 33, 80, 94],2289).
f([18, 90, 75, 16, 95, 79, 25, 80],478).
f([55, 95, 10, 22, 8, 48, 64, 70, 99, 49, 24, 31, 66, 85, 65, 85, 8, 85, 40, 21, 88, 4, 28, 9, 11, 70, 83, 59, 39, 86, 39, 59, 45, 48, 62, 13, 3, 72, 68, 8, 5, 36, 82, 44, 6, 101, 9],2207).
f([79, 88, 20, 49, 44, 57, 24, 92, 10, 90, 96, 52, 31, 53, 48, 7, 1, 52, 101, 87, 79, 13, 70, 98, 69, 87, 57, 74, 42, 5, 82, 93, 74, 76, 3, 8, 64, 46, 52, 44, 83, 58, 51],2409).
f([46, 76, 42, 24, 18, 4, 9, 68, 19],306).
f([72, 63, 84, 44, 63, 60, 91, 44, 6, 29, 84, 35, 39, 76, 53, 52, 99, 70, 4, 75, 77, 27, 79, 17, 62, 25, 7, 52, 32, 74, 60, 43, 47, 31, 41, 28, 26, 93, 59, 8],2031).
f([96, 44, 7, 42, 78, 41, 67, 13, 69, 50, 37, 45, 41, 32, 35, 94, 66, 7, 1, 7, 97, 50, 47, 24, 26, 97, 20, 93, 64, 40, 56, 65],1551).
:-end_in_pos.
:-begin_in_neg.
f([99, 96, 4, 23, 92, 17, 17, 8, 23, 15, 97, 46, 44, 26, 55, 51, 47, 93, 10, 47, 75, 9, 89, 47, 78, 21, 66, 85, 24, 7, 95, 35, 79, 11, 8, 62, 22, 98, 67, 33, 21, 82, 71, 61, 85, 56, 88],[47]).
f([51, 4, 35, 31, 48, 51, 92, 56, 9, 64, 88, 7, 29, 97, 85, 21, 54, 68, 98, 75, 24, 6, 16, 55, 28, 54, 54, 61],[97]).
f([73, 47, 54, 95, 99, 95, 73, 56, 30, 88, 45, 31, 74, 70, 95, 25, 35, 33, 66, 5, 32, 33, 36, 29, 55, 51, 62, 38, 74, 28],[47]).
f([32],[32]).
f([35, 48, 87, 82, 16, 6, 79, 7, 57, 12, 44, 52, 7, 33, 1, 64, 73, 91, 51, 33],[7]).
f([2, 2, 4, 57, 60, 43, 68, 34, 30, 31, 25, 78, 29, 79, 88, 34, 40],[60]).
f([25, 21, 34, 97, 28],[25]).
f([19, 19, 30, 45, 58, 42, 48, 12, 22, 32, 82, 27, 97, 91, 85, 39, 73, 43, 72, 99, 57, 41, 99, 66, 52, 77, 32, 23, 82, 66, 66, 10, 1, 37, 62, 27, 50, 1, 5, 31, 21, 49, 5],[66]).
f([91, 54, 86, 50, 46, 29, 51, 53, 48, 2, 38, 57, 23, 101, 61, 34, 27, 26, 6, 41, 98, 35, 77, 69, 61, 69, 40, 47, 20, 95, 54, 80, 24],[69]).
f([16, 63, 48, 101, 58, 17, 96, 34, 41, 50, 76, 97, 88, 2, 2, 29, 43, 58, 31, 62, 37, 87, 59, 8, 71, 28, 20, 42, 98, 17, 76, 60, 34, 47, 93, 50, 89, 80, 54, 49, 38, 21, 98, 20, 37, 59, 101, 2, 71, 49],[60]).
f([70, 39, 77, 88, 1, 2, 11, 23, 35, 55, 77, 72, 17, 49, 73],[2]).
f([95, 3, 71, 60, 3, 29, 7, 40, 32, 79, 25, 32, 41, 56, 82, 5, 73, 61, 52, 25, 70, 92, 47, 10, 55, 94, 76, 78, 82, 1, 12, 41, 14, 58, 57, 65, 10, 95, 38, 87, 46, 82, 31, 96, 98, 66, 47],[94]).
f([49, 7, 99, 15, 95],[15]).
f([47, 84, 63, 23, 46, 41, 40, 24, 46, 69, 64, 77, 64, 78, 31, 96, 40, 17, 84, 100, 7, 48, 82, 72, 86, 85, 96, 13, 25, 13, 32, 36, 34, 88, 23, 90, 79, 70, 10, 94, 88, 82, 92, 84, 55, 84, 92, 48],[92]).
f([78, 21, 96, 77, 70, 17, 45, 61, 97, 96, 65, 73, 66, 80, 46, 11, 71, 4, 37, 38, 46, 42, 44, 38, 66, 71, 10, 20, 29, 7, 14, 1, 66, 60, 40],[20]).
f([58, 85, 101, 81, 9, 57, 4, 51, 91, 5, 82, 49, 4, 97, 65, 8, 75, 4, 61, 98, 1, 98, 39, 100, 82, 95, 19, 43, 57, 35, 84, 74, 39, 64, 62, 63, 83, 75, 4, 66, 48, 65, 56, 30],[98]).
f([66, 19, 50, 84, 28, 93, 75, 55, 5, 55, 10, 38, 30, 99, 48, 49, 88, 8, 2, 44, 87, 66, 36, 56, 6, 89, 73, 46, 19, 94, 21, 59, 75, 7, 11, 52],[75]).
f([63],[63]).
f([90, 45, 67, 13, 27, 75, 23, 51, 26, 73, 48, 13, 77, 44, 39, 24, 31],[39]).
f([11, 32, 68, 50, 56, 65, 91, 65, 65, 40, 35, 57, 23, 63, 67, 90, 2, 9, 15, 33, 90],[11]).
:-end_in_neg.
