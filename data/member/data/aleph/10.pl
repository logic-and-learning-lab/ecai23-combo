:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-element)).
:- modeb(*,f(+list,-element)).
%% :- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,cons/3).
:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.

my_append(A,B,C):-
    append(A,[B],C).





c_0(0).
c_1(1).
c_2(2).
c_3(3).
c_4(4).
c_5(5).
c_6(6).
c_7(7).
c_8(8).
c_9(9).
c_10(10).
c_11(11).
c_12(12).
c_13(13).
c_14(14).
c_15(15).
c_16(16).
c_17(17).
c_18(18).
c_19(19).
c_20(20).
c_21(21).
c_22(22).
c_23(23).
c_24(24).
c_25(25).
c_26(26).
c_27(27).
c_28(28).
c_29(29).
c_30(30).
c_31(31).
c_32(32).
c_33(33).
c_34(34).
c_35(35).
c_36(36).
c_37(37).
c_38(38).
c_39(39).
c_40(40).
c_41(41).
c_42(42).
c_43(43).
c_44(44).
c_45(45).
c_46(46).
c_47(47).
c_48(48).
c_49(49).
c_50(50).
c_51(51).
c_52(52).
c_53(53).
c_54(54).
c_55(55).
c_56(56).
c_57(57).
c_58(58).
c_59(59).
c_60(60).
c_61(61).
c_62(62).
c_63(63).
c_64(64).
c_65(65).
c_66(66).
c_67(67).
c_68(68).
c_69(69).
c_70(70).
c_71(71).
c_72(72).
c_73(73).
c_74(74).
c_75(75).
c_76(76).
c_77(77).
c_78(78).
c_79(79).
c_80(80).
c_81(81).
c_82(82).
c_83(83).
c_84(84).
c_85(85).
c_86(86).
c_87(87).
c_88(88).
c_89(89).
c_90(90).
c_91(91).
c_92(92).
c_93(93).
c_94(94).
c_95(95).
c_96(96).
c_97(97).
c_98(98).
c_99(99).
c_100(100).
:-end_bg.
:-begin_in_pos.
f([25, 60, 17, 71, 19, 39, 6, 57, 12, 72, 94, 52],17).
f([92, 84, 66, 45, 33, 40, 66, 88, 51, 50, 42, 52, 43, 61, 57, 24, 62, 62, 34, 99],62).
f([37, 52, 49, 14, 45, 23, 44, 59, 39, 71, 81, 83, 87, 100, 74, 27, 69, 50, 8, 20, 60, 64, 34, 21, 16, 9, 31, 1, 51, 1, 35, 50, 38, 52],49).
f([4, 79, 51, 36, 7, 58, 96, 7, 7, 30, 73, 40, 10, 4, 25, 59, 35, 96, 22, 40, 62],79).
f([62, 3, 85, 61, 9, 26, 78, 9, 88, 5, 61, 8, 46, 14, 36, 70, 37, 6, 64, 70, 88, 82, 57, 67, 42, 61, 46, 7, 57, 28, 81, 18, 34, 89, 47, 3, 33, 53, 30, 67, 20, 57, 8, 10, 26, 3, 50],81).
f([35, 83, 87, 26, 84, 31, 32, 78, 26, 22, 23, 24, 30, 50, 97, 3, 34, 24, 63, 75, 31, 30, 10, 73, 57, 34, 96, 18, 21, 31, 79, 70, 67, 64, 75, 93],30).
f([98, 53, 81, 71, 78, 50, 11, 24, 26, 18, 14, 30, 77, 47, 37, 37, 10, 82, 90, 95, 78, 98, 90, 28, 94, 4, 97, 86, 26, 16, 55, 41, 43, 86, 35, 3, 5, 42, 64, 66, 32, 80, 81, 84, 13, 4],14).
f([12, 19, 2, 9, 23, 36, 70, 22, 88, 74, 18, 39, 36, 46, 67, 92, 53, 66, 39, 85, 60, 44, 49, 20, 25, 100, 54, 80, 43, 50, 100],49).
f([28, 81, 56, 88],28).
f([92, 45, 86, 61, 81, 61, 88, 7, 15, 101, 67, 23, 101, 37, 96, 1, 1, 70, 69, 9, 73, 99, 26, 52, 64, 86, 82, 48, 75, 37, 45, 66, 4],48).
f([63, 30, 85, 34, 49, 89, 2, 85, 27, 9, 60, 66, 27, 100, 40, 52, 32, 59],52).
f([82, 45, 42, 36, 20, 34, 4, 9, 46, 99, 61, 25, 44, 26, 55, 83, 20, 16, 92, 99, 22, 5, 42, 52, 51, 65, 79, 39, 70, 92, 53, 29, 6, 7, 84, 44, 19, 46, 39, 3],26).
f([61, 60, 97, 80, 36, 4, 85],80).
f([26, 11, 70, 29, 59, 12, 8, 56, 49, 98, 82, 83, 14, 72],70).
f([3, 59, 20, 96, 76, 71, 5],3).
f([73, 96, 12, 89, 81, 94, 97, 8, 27, 54, 10, 1, 53, 61, 85, 64, 89, 89, 2, 87, 39, 34, 53, 48, 97, 78, 15, 11, 39, 47, 8, 37, 23, 72, 71, 92, 26],10).
f([72, 82, 28, 6, 48, 99, 50, 5, 89, 99, 14, 91, 19, 68, 75, 59, 19, 71, 62, 15, 90, 62, 82, 81, 101, 23, 30, 66, 59, 40, 12, 58, 40, 17, 46, 70, 97, 85, 7, 58, 12, 8],28).
f([42, 26, 51, 71, 77, 46, 12, 55, 33, 44, 10, 72, 93, 48],33).
f([71, 34, 46, 32, 64, 90, 96, 37, 32, 56, 80, 63, 59, 85, 48, 37, 33, 7, 15, 96, 27, 64, 97, 79, 5, 101, 47, 26, 75, 91, 72, 91, 19, 98, 46, 51, 7, 64, 83, 16, 86, 58, 84, 15, 55],58).
f([75, 99, 79, 40, 20, 86, 34, 10, 61, 63, 6, 64, 85, 33, 17, 60, 88, 6, 31, 62, 75, 83, 93, 9, 64, 29, 17, 40, 9, 30, 10, 9, 96, 29, 62, 92, 87, 21, 78, 91, 46, 60, 24, 81, 42, 3, 90, 57, 27],92).
:-end_in_pos.
:-begin_in_neg.
f([50, 43, 85, 72, 34, 46, 92, 16, 23, 3, 13, 18, 3, 64, 65, 74, 21, 26, 85, 87, 81, 54, 65, 69, 54, 38],78).
f([2, 75, 45, 65, 99, 100, 1, 10, 69, 89, 57, 99, 21, 5, 69, 21, 60, 61, 33, 76, 42, 23, 14, 37, 87, 87, 83, 48, 96, 79, 96, 48, 47, 17, 40, 45, 91, 50, 100, 48, 39, 75, 17, 6, 72, 9, 71],64).
f([3],16).
f([62, 28, 84, 93, 47, 4, 55, 56, 47, 27, 22, 74, 60, 88, 96, 53, 2, 80, 35, 81, 93, 67, 51, 47, 100, 43, 84, 98, 62, 9, 62, 90, 42, 65, 81, 78, 37, 13, 95, 101, 67, 14, 87, 63, 71, 23, 3, 96],1).
f([68, 44, 20, 79, 54, 71, 94, 24, 7, 2, 7, 4, 77, 32, 92, 36, 81, 3, 49, 35, 81, 68, 72, 9, 94, 53, 71, 91, 79, 75, 43, 75, 42, 29, 76, 43, 17, 84, 85, 6, 89, 16, 43, 39, 68],38).
f([25, 11, 86, 7, 59, 67, 62, 4, 63, 94, 85, 73, 4, 18, 85, 26, 85, 90, 76, 10, 92],52).
f([94, 100, 11, 73, 57, 92, 43, 85, 97, 97, 40, 34, 69, 83, 21, 98, 89, 38, 20, 19, 100, 88, 1, 79, 87, 87, 71, 50, 40, 59, 4, 30, 6, 47, 68, 49, 20, 27, 62, 89, 67],81).
f([63, 68, 23, 20, 34, 6, 35, 83, 20, 14, 40, 75, 34, 40, 89, 15, 80, 21, 78, 85, 53, 84, 96, 38, 62, 72, 43, 68, 7, 28, 96, 62, 15, 12, 31, 99, 24, 62, 49, 72],64).
f([44, 56, 90, 75, 61, 47, 99, 16, 94, 74, 43, 85, 98, 43, 76, 43, 47, 1, 89, 23, 19, 50, 10, 33, 4, 13, 88, 75],51).
f([68, 5, 73, 81, 64, 89, 41, 45, 99],49).
f([87, 95, 55],12).
f([13, 35, 84, 88, 21, 53, 46, 71, 2, 73, 90, 65, 65, 81, 77, 57, 14, 96, 67, 47, 84, 67, 86, 29, 33, 70, 79, 54],78).
f([31, 50, 57, 79, 87, 72, 15, 10, 65, 73, 54, 41, 10, 26, 60, 32, 87, 76, 30, 55, 37, 64, 84, 83, 33, 44, 86, 82, 2, 4, 22, 14, 67, 34, 59, 55, 6, 81, 76, 92, 25],11).
f([37, 1, 101, 74, 90, 58, 53, 92, 46, 29, 36, 10, 51, 11, 99, 56, 57, 86, 32, 53, 1, 14, 24, 81, 95, 6, 27, 100, 21],12).
f([73, 17, 72, 30],27).
f([71, 65, 2, 78, 6, 90, 35, 17, 90, 56, 5, 60, 46, 100, 17, 58, 93, 86, 94, 28, 15, 81, 23, 88, 49, 49, 76, 47, 82, 15, 61, 58, 36, 9, 79, 61, 33, 101, 101, 84, 58, 96],12).
f([82, 74, 1, 57, 94, 7, 51, 81, 46, 89, 21, 58, 27, 41, 87, 87, 54, 67, 101, 30, 53, 55, 6, 71, 99, 40, 2, 78],92).
f([80, 37, 75, 38, 59, 72, 95, 92, 75, 32],33).
f([45, 1, 59, 99, 78, 17, 62, 75, 1, 77, 20, 10, 1, 95, 43, 77, 2, 28, 25, 61, 74, 47, 70, 44, 75, 5, 24],22).
f([80, 16, 44, 26, 59, 47, 55, 64, 43, 90, 39, 87, 93, 93, 73, 32, 92, 53, 60, 11, 34, 1, 55, 18, 75],24).
:-end_in_neg.
