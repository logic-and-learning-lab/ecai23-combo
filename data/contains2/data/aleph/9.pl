:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list)).
:- modeb(*,f(+list)).

:- determination(f/1,head/2).
:- determination(f/1,tail/2).
:- determination(f/1,geq/2).
:- determination(f/1,empty/1).
:- determination(f/1,even/1).
:- determination(f/1,odd/1).
:- determination(f/1,one/1).
:- determination(f/1,zero/1).
:- determination(f/1,decrement/2).
:- determination(f/1,f/1).
%% :- determination(f/1,increment/2).
%% :- determination(f/1,element/2).
%% :- determination(f/1,cons/3).

:- determination(f/1,c_0/1).
:- determination(f/1,c_1/1).
:- determination(f/1,c_2/1).
:- determination(f/1,c_3/1).
:- determination(f/1,c_4/1).
:- determination(f/1,c_5/1).
:- determination(f/1,c_6/1).
:- determination(f/1,c_7/1).
:- determination(f/1,c_8/1).
:- determination(f/1,c_9/1).
:- determination(f/1,c_10/1).

:-modeb(*,c_0(-element)).
:-modeb(*,c_1(-element)).
:-modeb(*,c_2(-element)).
:-modeb(*,c_3(-element)).
:-modeb(*,c_4(-element)).
:-modeb(*,c_5(-element)).
:-modeb(*,c_6(-element)).
:-modeb(*,c_7(-element)).
:-modeb(*,c_8(-element)).
:-modeb(*,c_9(-element)).
:-modeb(*,c_10(-element)).

:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.

my_append(A,B,C):-
    append(A,[B],C).





c_0(0).
c_1(1).
c_2(2).
c_3(3).
c_4(4).
c_5(5).
c_6(6).
c_7(7).
c_8(8).
c_9(9).
c_10(10).
c_11(11).
c_12(12).
c_13(13).
c_14(14).
c_15(15).
c_16(16).
c_17(17).
c_18(18).
c_19(19).
c_20(20).
c_21(21).
c_22(22).
c_23(23).
c_24(24).
c_25(25).
c_26(26).
c_27(27).
c_28(28).
c_29(29).
c_30(30).
c_31(31).
c_32(32).
c_33(33).
c_34(34).
c_35(35).
c_36(36).
c_37(37).
c_38(38).
c_39(39).
c_40(40).
c_41(41).
c_42(42).
c_43(43).
c_44(44).
c_45(45).
c_46(46).
c_47(47).
c_48(48).
c_49(49).
c_50(50).
c_51(51).
c_52(52).
c_53(53).
c_54(54).
c_55(55).
c_56(56).
c_57(57).
c_58(58).
c_59(59).
c_60(60).
c_61(61).
c_62(62).
c_63(63).
c_64(64).
c_65(65).
c_66(66).
c_67(67).
c_68(68).
c_69(69).
c_70(70).
c_71(71).
c_72(72).
c_73(73).
c_74(74).
c_75(75).
c_76(76).
c_77(77).
c_78(78).
c_79(79).
c_80(80).
c_81(81).
c_82(82).
c_83(83).
c_84(84).
c_85(85).
c_86(86).
c_87(87).
c_88(88).
c_89(89).
c_90(90).
c_91(91).
c_92(92).
c_93(93).
c_94(94).
c_95(95).
c_96(96).
c_97(97).
c_98(98).
c_99(99).
c_100(100).
:-end_bg.
:-begin_in_pos.
f([92, 83, 63, 21, 101, 6, 12, 81, 46, 66, 8, 35, 92, 96, 72, 45, 96, 90, 93, 101, 50, 59, 11, 47, 49, 23, 58, 3, 29, 4, 51, 14, 67, 59, 67, 17]).
f([40, 99, 49, 68, 50, 100, 81, 75, 65, 41, 6, 46, 27, 82, 61, 80, 87, 96, 73, 9, 95, 71, 22, 46, 41, 20, 80, 53]).
f([52, 26, 39, 35, 72, 70, 6, 37, 93, 66, 82, 89, 66, 93, 64, 78, 42, 87]).
f([26, 89, 1, 88, 42, 57, 22, 6, 57, 22, 37, 73, 82, 48, 74, 76, 79, 23, 17, 65, 60, 49, 92, 74, 1, 83, 23, 48, 98, 56, 47, 62, 30, 19, 72, 21]).
f([58, 100, 63, 15, 9, 79, 17, 44, 45, 80, 50, 45, 55, 7, 77, 28, 73, 33, 17, 83, 23, 66, 36, 64, 18, 75, 63, 85, 98, 27, 28, 79, 28, 2, 89, 25, 45, 76, 81, 18, 28, 87, 6, 26, 18, 75, 99, 18, 64, 89]).
f([75, 60, 28, 88, 77, 91, 40, 87, 25, 47, 51, 38, 71, 8, 18, 88, 80, 41, 37, 14, 77, 80, 52, 35, 11, 20, 80, 47, 81, 49, 9, 52, 15, 100, 88, 85, 69, 19, 8, 63, 46, 21, 14, 22, 16, 5, 86, 26, 39]).
f([16, 19, 16, 20, 72, 52, 66, 51, 76, 20, 94, 63, 95, 9, 33, 91]).
f([9, 40, 76, 70, 66]).
f([63, 56, 19, 101, 39, 65, 79, 35, 41, 7, 74, 100, 6, 70, 86, 75, 24, 59, 43, 22, 32, 34, 89, 86, 89, 72, 23, 11, 7, 19, 65, 53, 21, 19, 68, 32, 77, 16, 89, 101, 26, 62, 55, 93, 61, 32, 66, 59, 97, 41, 96]).
f([55, 18, 68, 57, 31, 98, 17, 70, 32, 97, 45, 64, 1, 69, 35, 95, 20, 75, 38, 5, 62, 56, 67, 65, 23, 76, 27, 35, 9, 7, 30, 8, 41, 100, 47, 56, 91, 58, 32, 67, 5, 49, 13, 38, 93, 8, 99, 38]).
f([29, 6, 68, 78, 98, 101, 60, 72, 51, 23, 38, 10, 2, 91, 30, 30, 83, 90, 25, 2, 93, 84, 75, 75, 45, 92, 70, 71]).
f([23, 56, 27, 20, 93, 48, 53, 9, 37, 9, 72, 91, 40, 25, 33]).
f([43, 5, 54, 38, 38, 68, 87, 69, 63, 11, 61, 11, 49, 55, 21, 71, 69, 23, 37, 17, 58, 19, 49, 40, 76, 66, 37, 24, 9, 87, 51, 79, 24, 10, 75, 51, 89, 57, 63, 66, 12, 71, 61, 37, 22]).
f([19, 80, 95, 83, 37, 84, 25, 8, 54, 2, 65, 6, 70, 81, 61, 38, 1, 5, 74, 4, 54, 94, 101, 47, 52, 10, 77, 92, 93, 63, 71]).
f([99, 64, 82, 50, 64, 59, 59, 73, 35, 64, 3, 66, 54, 101, 9, 98, 68, 73, 73, 92, 30, 20, 11, 18, 71, 75, 84, 73, 28, 12, 25, 49, 64, 70, 78, 73, 9, 10, 100, 55, 99, 49, 13]).
f([96, 9, 12, 14, 34, 63, 81, 99, 66, 39]).
f([32, 65, 88, 76, 13, 36, 7, 71, 3, 44, 38, 27, 41, 9, 99, 93, 79, 5, 3, 98, 40, 33, 58, 45, 71, 17, 95, 59, 46, 12]).
f([24, 9, 34, 83]).
f([54, 52, 9, 96, 26, 6, 10, 99, 4, 70, 10, 90, 96, 87, 84, 58, 35, 97, 89, 82, 101, 57, 78, 78, 58, 82, 7, 59, 58, 15, 6]).
f([25, 72, 76, 98, 89, 94, 19, 75, 62, 51, 79, 72, 72, 74, 80, 39, 85, 87, 75, 33, 83, 42, 20, 71, 29, 44, 39, 33, 57, 6, 53, 5, 48, 51, 69]).
:-end_in_pos.
:-begin_in_neg.
f([13, 64, 68, 54, 93, 60, 63, 57, 25, 2, 24, 66, 11, 49, 45, 27, 46, 95, 47]).
f([75, 56, 18, 100, 52, 42]).
f([44, 78, 10, 85, 72, 90, 63, 85, 5, 7, 20, 61, 89, 33, 99, 64, 76, 77, 86, 19, 71, 29, 69, 99, 80, 25, 78, 78, 37, 100, 49, 78, 17, 32, 37, 12, 99, 24, 12, 19, 25, 42]).
f([57, 43, 29, 8, 66, 29, 36, 51, 11, 73, 70, 16, 90, 34, 77, 53, 95, 78, 40, 98, 68, 89, 83, 51, 34, 85, 52, 39, 16, 97, 54, 72, 41, 89, 84, 100, 27, 2]).
f([14]).
f([52, 98, 12, 55, 50, 85, 53, 53, 21, 73, 28, 12, 83, 26, 15, 28]).
f([4, 23, 29, 28, 44, 100, 20, 73, 28, 12, 63, 13, 27, 51, 11, 13, 46, 68, 70, 27, 3, 67, 22]).
f([64, 20, 67, 89, 23, 85, 36, 73, 34, 13, 29, 64, 66, 76]).
f([48, 13, 93, 62, 51, 4, 91, 38, 94, 56, 70, 30, 42, 100, 12, 38, 59, 31, 15, 64, 50, 53, 28, 71, 39, 60, 22, 67, 47, 28, 30, 81, 5, 54, 33, 65, 53]).
f([42, 27, 79, 101, 21, 96, 28, 29, 31, 99, 95, 8, 78, 52, 74, 21, 100, 36, 96, 92, 72, 73, 72, 101, 54, 85, 37, 82, 49, 56, 30, 58, 83, 14, 5, 47, 72, 65, 101, 49, 50, 3]).
f([90, 41, 45, 1, 8, 37]).
f([49, 44, 42, 84, 4, 10, 7, 81, 25, 52, 71, 43, 97, 89, 48, 36, 50, 23, 88, 72, 70, 94, 49, 7, 77, 71, 25, 53, 15, 101, 28, 81, 94, 88, 11, 75, 89, 89]).
f([62, 87, 45, 70, 40]).
f([31, 17, 3, 54, 100, 17, 2, 2, 54, 38, 84, 43, 89, 54, 47, 45, 52, 15, 27, 14, 64, 11]).
f([95, 39, 38, 72]).
f([1, 93, 11, 37, 13, 90, 74, 34, 65, 82]).
f([95, 3, 4, 54, 93, 13, 49, 53, 52, 95, 3, 86, 67, 70, 27, 94, 89, 60, 98, 56, 91, 81, 26, 54, 80, 23, 81, 101, 94, 58, 18, 40, 72, 52, 79, 13, 84, 77, 76, 36, 97, 84, 71, 31, 33, 101, 64]).
f([15, 100, 61, 51, 10, 44, 19, 59, 75, 84, 59, 40, 100, 4, 59, 37, 31, 52, 2, 37, 28, 40, 24, 34, 7, 46, 17, 41, 64, 65, 67, 27, 43]).
f([29, 94, 51, 69, 3, 16, 20, 38, 98, 93]).
f([65, 4, 47, 61, 86, 31, 20, 47, 18, 90, 40, 33, 48, 33, 70, 2, 17, 48, 73]).
:-end_in_neg.
