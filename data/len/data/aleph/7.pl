:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-element)).
:- modeb(*,f(+list,-element)).
%% :- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
:- determination(f/2,element/2).
:- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,cons/3).
:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.

my_append(A,B,C):-
    append(A,[B],C).





c_0(0).
c_1(1).
c_2(2).
c_3(3).
c_4(4).
c_5(5).
c_6(6).
c_7(7).
c_8(8).
c_9(9).
c_10(10).
c_11(11).
c_12(12).
c_13(13).
c_14(14).
c_15(15).
c_16(16).
c_17(17).
c_18(18).
c_19(19).
c_20(20).
c_21(21).
c_22(22).
c_23(23).
c_24(24).
c_25(25).
c_26(26).
c_27(27).
c_28(28).
c_29(29).
c_30(30).
c_31(31).
c_32(32).
c_33(33).
c_34(34).
c_35(35).
c_36(36).
c_37(37).
c_38(38).
c_39(39).
c_40(40).
c_41(41).
c_42(42).
c_43(43).
c_44(44).
c_45(45).
c_46(46).
c_47(47).
c_48(48).
c_49(49).
c_50(50).
c_51(51).
c_52(52).
c_53(53).
c_54(54).
c_55(55).
c_56(56).
c_57(57).
c_58(58).
c_59(59).
c_60(60).
c_61(61).
c_62(62).
c_63(63).
c_64(64).
c_65(65).
c_66(66).
c_67(67).
c_68(68).
c_69(69).
c_70(70).
c_71(71).
c_72(72).
c_73(73).
c_74(74).
c_75(75).
c_76(76).
c_77(77).
c_78(78).
c_79(79).
c_80(80).
c_81(81).
c_82(82).
c_83(83).
c_84(84).
c_85(85).
c_86(86).
c_87(87).
c_88(88).
c_89(89).
c_90(90).
c_91(91).
c_92(92).
c_93(93).
c_94(94).
c_95(95).
c_96(96).
c_97(97).
c_98(98).
c_99(99).
c_100(100).
:-end_bg.
:-begin_in_pos.
f([1, 21, 29, 47, 71, 65, 82, 30, 60, 46, 42, 18, 5, 66, 76, 1, 86, 84, 18, 84, 27, 37, 71, 35, 23, 30, 49, 100, 16, 86, 9, 59, 57],33).
f([65, 88, 96, 76, 24, 56, 82, 60, 92, 38, 82, 24, 8, 3, 99, 76, 4, 10, 97, 42, 92, 84, 12, 52, 101, 96, 37, 55, 46, 9, 91, 30, 10, 98],34).
f([65, 6, 42, 69, 70, 27, 71, 77, 67, 81, 44, 61, 97, 40, 91, 77, 6, 72, 26, 69, 69],21).
f([75, 89, 94, 89, 36, 60, 3, 25, 38, 51, 1, 76, 64, 81, 82, 73, 82, 5, 99, 20, 24, 81, 71],23).
f([17, 42, 27, 93],4).
f([3, 21, 81, 90, 71, 27, 84, 1, 58, 18, 66, 36, 19, 88, 63, 58],16).
f([86, 45, 78, 73, 100, 99, 27, 84, 100, 47, 88, 31, 2, 11, 69, 45, 88, 33],18).
f([80, 82, 19, 21, 54, 3, 74, 98, 37, 81, 69, 67, 40, 75, 75, 3, 46, 68, 49, 80, 65, 96, 6, 80, 28, 63, 36, 34, 72, 89, 90, 74, 44, 26, 98, 29, 49],37).
f([5, 13, 7, 65],4).
f([12, 8, 54, 45, 48, 76, 5, 96, 9],9).
f([85, 22, 45, 7, 12, 49, 45, 80, 94, 28, 46, 61, 42, 40, 27, 55, 97, 100, 1, 84, 82, 100, 52],23).
f([79, 49, 17, 66, 12, 10, 39, 41, 57, 85, 22, 49, 9, 42, 14, 78, 89, 20, 80, 93, 49, 96, 38, 77, 35, 34, 3, 87, 8, 69, 72, 62, 31, 74, 88, 96, 75, 22, 66, 34, 92, 13, 34, 76, 96, 84, 29, 93],48).
f([48, 50, 25, 41, 1, 25, 6, 29, 94, 37, 95, 39, 86, 37, 10, 83, 58, 6, 17, 62, 87, 12, 35, 89, 98, 35, 34, 41, 65, 55, 50, 36, 6, 26, 58, 10, 46, 97, 1, 27, 76, 94, 47, 1, 91, 2, 8],47).
f([39, 82, 44, 5, 12, 100, 76, 33, 30, 68, 54, 88, 95, 22, 11, 86, 56, 88, 82, 63, 45, 86, 8, 39, 57, 100, 11, 47, 28, 51, 21, 48, 70, 94, 3, 86, 62],37).
f([94, 93, 46, 44, 19, 5, 33, 56, 84, 39, 5, 86, 52, 71, 69, 25, 10, 38, 55, 27, 96, 37, 80, 33, 40, 18, 77, 9, 48, 100, 67, 72, 59, 47, 34, 27, 56, 78, 68],39).
f([32, 68, 63, 46, 92],5).
f([8, 19, 27, 79, 82, 99, 48, 32, 87, 72, 78, 49, 21, 22, 59, 76, 79, 32, 12, 59, 81, 10, 68, 20, 28, 34, 34, 54, 44, 41, 61, 93, 30, 74, 53, 33, 85, 92, 67, 57, 21],41).
f([48, 74, 42, 7, 11, 46, 48, 91, 58, 18, 47, 43, 45, 15, 19, 84, 8, 18, 36, 95, 31, 90, 101, 50],24).
f([80, 80, 38, 73, 56, 17, 28, 72, 30, 89, 19, 92, 1, 2, 73, 54, 7, 77, 97, 93, 85, 98, 16, 61, 99, 95, 41, 43, 44, 18, 68, 66, 88, 16, 8, 15, 18, 88, 45, 87, 29, 68, 4, 87, 21, 7, 95, 81, 98, 18],50).
f([58, 26, 66, 33, 55, 55, 2, 46, 101, 41, 27, 83, 42, 21],14).
:-end_in_pos.
:-begin_in_neg.
f([50, 59, 67, 82, 49, 33, 27, 14, 32, 33, 49, 42, 56, 76, 14, 58, 50, 23, 15, 76, 70, 70, 52, 37, 62, 68, 61, 9, 39, 94, 97, 31, 73, 23, 15, 20, 59, 48, 89, 99, 16, 61, 52],53).
f([24, 43, 35, 40, 65, 85, 71, 71, 44, 51, 67, 88, 32, 9],84).
f([33, 8, 6, 18, 97, 1],78).
f([34, 39, 97, 54, 56, 48, 43, 68, 31, 17, 61, 85, 62, 83, 3, 67, 20, 73, 3, 2, 61, 21, 89, 90, 44, 49, 67, 50, 72, 36, 65, 38],90).
f([13, 12, 72, 24, 3, 7, 96, 82],57).
f([91, 15, 77, 19, 4, 92, 82, 69, 59, 94, 86, 97, 11, 55, 60, 35, 64, 10, 15, 99, 31, 23, 93, 30, 67, 15, 77, 62, 101, 7, 49, 76, 93, 89, 46, 78, 20, 93, 83, 95, 1],12).
f([100, 21, 93, 47, 49, 80, 75, 91, 44, 83, 85, 14, 2, 28, 33, 49, 97, 25, 86, 53, 41, 58, 43, 100, 22, 28, 91, 43, 27, 28, 47, 37, 84, 60, 13, 66, 8, 10, 76, 52, 92, 10, 69, 36, 37],7).
f([82, 90, 62, 64, 8, 55, 23, 53, 67, 63, 60, 65, 46, 7, 5, 85, 21, 30, 5, 46, 78, 9, 48, 55, 26, 29, 5, 52, 5, 83, 100, 67, 24, 38, 90, 27, 56],16).
f([62, 28, 35, 43, 21, 22, 100, 20, 43, 91, 68, 32, 87, 8, 4, 54, 62, 20, 6, 68, 46, 20, 59, 19, 47, 3, 30, 87, 76, 32, 47, 79, 47, 63, 24, 12, 83, 54, 14, 81, 24, 79, 34, 19, 67, 62, 2, 41],1).
f([66, 15, 72, 38, 12, 69, 9, 32, 31, 89, 79, 44, 16, 48, 30, 68],38).
f([40, 77, 26, 32, 33, 87, 27, 52, 87, 80, 22, 36, 4, 84, 82, 35, 73, 70, 101, 46, 16, 9, 34, 40, 25, 46, 17, 98, 36, 21, 12, 89, 15, 46, 6, 95, 43, 22, 33, 33, 46, 19, 57],41).
f([99, 11, 60, 80, 99, 83, 98, 92, 42, 7, 13, 99, 93, 51, 52, 79, 17, 32, 84, 82, 28, 54, 63, 10, 16, 29, 64, 31],57).
f([90, 44, 94, 56, 101, 89, 62, 70, 39, 37, 65, 1, 54],49).
f([62, 65, 43, 16, 2, 89, 89, 11, 88, 9, 94, 91, 51, 13, 24, 29, 67, 6, 39, 60, 54, 37, 50, 98, 98, 5, 90, 57, 83, 89, 2, 96, 2, 58, 55, 21, 86, 67, 82, 75, 84],9).
f([70, 13, 29, 4, 57, 39, 93, 76, 25, 82, 89, 87, 16, 53, 25, 33, 53, 41, 47, 64, 32, 81, 99, 80, 49, 6, 33, 86, 49, 86, 91, 62, 4, 12, 19, 7, 86, 19, 14, 101, 58, 44, 99, 26, 37, 80, 55, 13, 10, 26],57).
f([10, 92, 96, 66, 10, 76, 58, 22, 77, 16, 34, 85, 3, 50, 83, 77, 7, 89, 75, 61, 33, 86, 100, 7, 25, 34, 1, 70, 33, 65, 9, 84, 86, 3, 67, 51, 13, 32, 69],90).
f([25, 92, 59, 33, 58, 76, 74, 3, 83, 90, 98, 17, 37, 58, 72, 83, 100, 93, 33, 95, 80, 11, 30, 24, 34, 64, 75, 13, 31, 48, 43, 75, 13, 87],96).
f([23, 8, 74, 57, 27, 98, 34, 22, 92],95).
f([100, 59, 66],8).
f([66, 16, 18, 43, 70, 40, 59, 53, 16, 95, 35, 40, 28, 17, 94, 62, 4, 42, 53, 4, 79, 88, 56, 7, 32, 26, 8, 83, 48, 84, 40, 90, 96, 12, 72, 84, 53, 57, 32, 67, 93, 12, 49, 86, 77, 83, 93, 72],11).
:-end_in_neg.
