:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-element)).
:- modeb(*,f(+list,-element)).
%% :- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,cons/3).
:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.

my_append(A,B,C):-
    append(A,[B],C).





c_0(0).
c_1(1).
c_2(2).
c_3(3).
c_4(4).
c_5(5).
c_6(6).
c_7(7).
c_8(8).
c_9(9).
c_10(10).
c_11(11).
c_12(12).
c_13(13).
c_14(14).
c_15(15).
c_16(16).
c_17(17).
c_18(18).
c_19(19).
c_20(20).
c_21(21).
c_22(22).
c_23(23).
c_24(24).
c_25(25).
c_26(26).
c_27(27).
c_28(28).
c_29(29).
c_30(30).
c_31(31).
c_32(32).
c_33(33).
c_34(34).
c_35(35).
c_36(36).
c_37(37).
c_38(38).
c_39(39).
c_40(40).
c_41(41).
c_42(42).
c_43(43).
c_44(44).
c_45(45).
c_46(46).
c_47(47).
c_48(48).
c_49(49).
c_50(50).
c_51(51).
c_52(52).
c_53(53).
c_54(54).
c_55(55).
c_56(56).
c_57(57).
c_58(58).
c_59(59).
c_60(60).
c_61(61).
c_62(62).
c_63(63).
c_64(64).
c_65(65).
c_66(66).
c_67(67).
c_68(68).
c_69(69).
c_70(70).
c_71(71).
c_72(72).
c_73(73).
c_74(74).
c_75(75).
c_76(76).
c_77(77).
c_78(78).
c_79(79).
c_80(80).
c_81(81).
c_82(82).
c_83(83).
c_84(84).
c_85(85).
c_86(86).
c_87(87).
c_88(88).
c_89(89).
c_90(90).
c_91(91).
c_92(92).
c_93(93).
c_94(94).
c_95(95).
c_96(96).
c_97(97).
c_98(98).
c_99(99).
c_100(100).
:-end_bg.
:-begin_in_pos.
f([59, 4, 2, 55, 31, 88, 76, 56, 48, 47, 32, 32, 98],98).
f([33, 45, 23, 83, 1, 25, 88, 84, 9, 69, 41, 100, 22, 42, 45, 94, 57, 100, 44, 92, 86, 15, 12, 95, 51, 53, 86, 16, 82, 32, 21, 35, 63, 19, 12, 61, 91, 74, 23, 57, 59],59).
f([21, 72, 87, 48, 70, 33, 1, 27, 39, 17, 55, 15],15).
f([71, 74, 71, 31, 101, 1, 93, 6, 6],6).
f([57, 53, 45, 68, 42, 72, 13, 64, 52, 35, 37, 34, 53, 93, 97, 19, 48, 66, 35, 16, 77, 88, 69, 48, 95, 84, 3],3).
f([12, 98, 78, 41, 43, 4, 8, 40, 45, 30, 23, 6, 42, 81, 19, 68, 55, 21, 34, 15, 101, 6, 99, 32, 43, 43, 95, 82, 3, 32, 78],78).
f([76, 95, 100, 88, 87, 32, 39, 97, 29, 25, 47, 41, 84, 77, 26, 58, 23, 85, 27, 70, 42, 38, 45, 41, 15, 41, 94, 54, 15, 50, 53],53).
f([101, 80, 5, 57, 58, 41, 56, 99, 70, 38, 62, 62, 79, 63, 2, 18, 100, 29, 31, 12, 20, 56, 31],31).
f([6, 32, 91, 7, 29, 60, 40, 91, 25, 22, 86, 56, 92, 1, 57, 45, 21, 26, 42, 9, 15, 92, 96, 69, 6, 60, 12, 51, 45, 57, 2, 97, 38, 86, 96, 66, 15, 15, 20, 82, 31],31).
f([94, 73, 77, 85, 96, 12, 79],79).
f([2, 84, 94, 94, 10, 28, 51, 80, 96, 100, 22, 97, 15, 99, 89, 85, 70, 96, 76, 75, 45, 83, 68, 100, 21, 44, 9, 76, 95, 90, 78, 37, 46, 53, 95, 43, 64, 42, 37, 91, 15, 71, 25],25).
f([15, 27, 78, 80, 70, 39, 55, 88, 92, 95, 100, 55, 78, 36, 67, 85, 99, 81, 20, 30, 61, 85, 35, 100, 27, 13, 88, 99, 40, 77, 89, 85, 82, 30, 55, 99, 44],44).
f([57, 36, 64, 58, 51, 54, 11, 97, 74, 40, 26, 55, 51, 70, 24, 99, 82, 38, 45, 52, 46, 87, 4, 52, 94, 100, 10, 76, 53, 85, 82, 36, 54, 27, 23, 46, 84, 42, 84, 76, 24, 2, 51, 79],79).
f([5, 1, 12],12).
f([96, 10, 37, 64, 33, 44, 3, 71, 73, 77, 38, 78, 96, 94, 65, 47, 1, 8, 65, 36, 86, 64, 63, 39, 76, 75, 17, 51, 62, 5, 44, 32, 50, 17, 45, 83, 90, 73, 27, 53, 71],71).
f([83, 58, 63, 41, 81, 38, 85, 30, 1, 26, 3, 66, 4, 44, 4, 68, 72, 4, 65, 62, 68, 87, 100, 28, 53, 44, 49, 24, 21, 62, 44, 11, 44],44).
f([73, 65, 84, 92, 64, 18, 96, 35, 13, 43, 94, 29, 66, 75, 25, 75, 5, 96, 4, 47, 98, 87, 97, 49, 74, 89, 92, 88, 73, 14, 73, 93, 18, 99, 46, 94, 39, 40, 17, 73, 45, 32, 94, 90, 52],52).
f([20, 77, 19, 43, 82, 6, 42, 44, 14, 46, 64, 86, 81, 96, 54, 12, 78, 101, 6, 61, 96, 82, 6, 65, 12, 71, 7, 43, 73, 17, 46, 67, 93, 10, 64, 13, 77, 39, 62, 39, 4, 54, 82, 70, 49, 89, 74],74).
f([70, 67, 50, 1, 51, 7, 11, 45, 13, 48, 9, 36, 13, 36, 9, 97, 74, 52, 45, 63, 8, 63, 5, 17, 58, 52, 88, 24, 67, 34],34).
f([12, 30, 28, 24, 21, 39, 75, 5, 40, 2, 74, 99, 58, 28, 56, 64, 39, 92, 44, 101, 59, 73, 12, 91, 101],101).
:-end_in_pos.
:-begin_in_neg.
f([6, 30, 42, 26, 62, 10, 46, 56, 79, 10, 19, 93, 13, 9, 61, 77, 25, 29, 1, 31, 63, 76, 53, 76, 100, 39, 44, 101, 8],62).
f([32, 59, 73, 87, 41, 46, 6, 93, 95, 4, 79, 49, 72, 41, 7, 2, 51, 97, 83, 36, 78, 48, 38, 20],78).
f([81, 97, 3, 2, 44, 92, 47, 12, 65, 91, 66, 15, 32, 31, 32, 27, 90, 1, 10, 25, 99, 52, 1, 49, 89, 33, 90, 81, 35, 89, 97, 33, 52, 30, 89, 26, 61, 67, 54, 65, 19],67).
f([22, 16, 5, 81, 66, 3, 23, 31, 36, 24, 29, 6, 86, 94, 101, 78, 24, 86, 17, 58, 19, 7, 21, 14, 87, 11, 92, 94, 3, 101, 63, 53, 69, 93, 1, 101, 52, 60, 6, 22, 45, 47, 5, 43, 6, 89, 43, 93, 50],19).
f([27, 91, 88, 35, 1, 97, 48, 99, 56, 79, 62, 2, 33, 58, 94, 75, 74, 66, 34, 46, 66, 26, 92, 28, 57, 26, 9, 16, 15, 42, 24, 92, 100, 45, 91, 77, 34, 71, 37, 100, 3, 13, 80, 61, 9, 99, 43, 36],43).
f([66, 14, 93, 47, 24, 81, 77, 35, 20, 2, 47, 29, 5, 71, 75, 77, 24, 59, 19, 62, 45, 81, 36, 19, 26, 22, 75, 33, 77, 75, 54, 60, 42, 76, 32, 28, 90, 20, 59, 52, 30, 18, 36, 5],19).
f([49, 70, 17, 71, 43, 65],71).
f([97, 17, 16, 55, 28, 56, 5, 61, 84, 92, 4, 7, 30, 90, 33, 42, 37, 2, 12, 11, 26, 76, 36, 21, 90, 56, 56],11).
f([62, 64, 62],64).
f([38, 98, 94, 30, 30, 35, 63, 82, 50, 12, 4, 2, 35, 96, 25, 8, 70, 53],12).
f([14, 75, 61, 27, 53, 81, 37, 47, 82, 42, 26, 43, 55, 80, 11, 10, 67, 67, 2, 55, 66, 51, 70, 33, 79, 47, 10, 67, 89, 94, 69, 27, 60, 60, 62, 84, 50, 34, 10, 85, 36, 41, 78, 21, 101, 15, 89],84).
f([36, 30, 101, 34],101).
f([34, 95, 100, 6, 32, 27, 19, 71, 64],100).
f([14, 82, 64, 12, 71, 68, 31, 58, 20, 55, 62, 99, 82, 37, 64, 84, 15, 97, 11, 77, 34, 89],64).
f([79, 90, 26, 66, 22, 94, 28, 46, 50, 69, 13, 55, 93, 2, 33, 17, 8, 86, 17, 39, 14, 25, 77, 52, 26, 56, 93, 18, 15, 46, 22, 39, 90, 70, 65, 91, 22, 54, 26, 78, 18, 82, 25, 47, 55, 15, 53, 95],91).
f([41, 73, 9, 41, 20, 79, 67, 69, 56, 65, 93, 28, 98, 35, 90, 20, 19, 86, 23, 59, 10, 79, 77, 10, 41, 64, 63, 24, 70, 29, 48, 98, 16, 78, 55, 59, 22, 16, 22, 69, 70, 52, 88, 19],35).
f([66, 61, 53, 68, 23, 63, 80, 101, 37, 12, 48, 18, 42, 25, 95, 55, 42, 47, 71, 57],80).
f([84, 32, 93, 99, 65, 97, 33, 15, 16, 96, 76, 32, 64, 42, 68, 18, 4, 57, 41, 25, 64, 57, 66, 88, 30, 9, 4, 39, 66, 36, 67, 80, 101, 48, 89, 55, 48, 36, 80, 16, 83, 54, 94, 26, 90, 2, 62, 77, 74],57).
f([21, 12, 44, 39, 95, 63, 13, 74],44).
f([56, 40, 80, 78, 2, 87, 75, 50, 29, 52, 92, 50, 58, 91, 20, 69, 58, 84, 28, 57, 23, 85],56).
:-end_in_neg.
