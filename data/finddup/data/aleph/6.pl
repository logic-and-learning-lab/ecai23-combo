:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-element)).
:- modeb(*,f(+list,-element)).
:- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
:- determination(f/2,element/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,cons/3).
:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.

my_append(A,B,C):-
    append(A,[B],C).





c_0(0).
c_1(1).
c_2(2).
c_3(3).
c_4(4).
c_5(5).
c_6(6).
c_7(7).
c_8(8).
c_9(9).
c_10(10).
c_11(11).
c_12(12).
c_13(13).
c_14(14).
c_15(15).
c_16(16).
c_17(17).
c_18(18).
c_19(19).
c_20(20).
c_21(21).
c_22(22).
c_23(23).
c_24(24).
c_25(25).
c_26(26).
c_27(27).
c_28(28).
c_29(29).
c_30(30).
c_31(31).
c_32(32).
c_33(33).
c_34(34).
c_35(35).
c_36(36).
c_37(37).
c_38(38).
c_39(39).
c_40(40).
c_41(41).
c_42(42).
c_43(43).
c_44(44).
c_45(45).
c_46(46).
c_47(47).
c_48(48).
c_49(49).
c_50(50).
c_51(51).
c_52(52).
c_53(53).
c_54(54).
c_55(55).
c_56(56).
c_57(57).
c_58(58).
c_59(59).
c_60(60).
c_61(61).
c_62(62).
c_63(63).
c_64(64).
c_65(65).
c_66(66).
c_67(67).
c_68(68).
c_69(69).
c_70(70).
c_71(71).
c_72(72).
c_73(73).
c_74(74).
c_75(75).
c_76(76).
c_77(77).
c_78(78).
c_79(79).
c_80(80).
c_81(81).
c_82(82).
c_83(83).
c_84(84).
c_85(85).
c_86(86).
c_87(87).
c_88(88).
c_89(89).
c_90(90).
c_91(91).
c_92(92).
c_93(93).
c_94(94).
c_95(95).
c_96(96).
c_97(97).
c_98(98).
c_99(99).
c_100(100).
:-end_bg.
:-begin_in_pos.
f([92, 32, 11, 92],92).
f([80, 57, 99, 26, 87, 97, 58, 67, 96, 20, 9, 6, 80, 63, 64, 46, 51, 40, 46, 22, 29, 72, 62, 27, 59, 65, 75, 57, 62, 55, 92, 45, 87, 49, 48, 74, 94, 99, 87, 2, 52, 42, 26, 15],62).
f([55, 12, 45, 36, 49, 79, 38, 70, 78, 12, 38, 57, 12, 33, 15, 48, 50, 63, 17],12).
f([87, 51, 33, 91, 42, 48, 3, 90, 12, 76, 12, 23, 21, 5, 14, 8, 37, 91, 84, 36, 77, 40, 101, 55, 11, 80, 36, 85, 20, 20, 40, 15, 26, 31, 68, 60, 15, 41, 98, 88, 72, 67, 29, 32, 3, 85],85).
f([54, 76, 54, 63, 90, 101, 66, 61, 58, 11, 69, 46, 35, 54, 54, 58, 24, 66, 22, 96, 54, 65, 97, 53, 33, 58, 5, 24, 51, 100, 81, 7, 41, 74, 74, 81, 7, 8, 11, 66, 90],90).
f([67, 47, 14, 90, 64, 10, 52, 12, 60, 15, 88, 90, 70, 20, 13, 91, 6, 84, 74, 91, 1, 84, 17, 14, 93, 7, 99, 63, 32, 76, 76, 20, 30, 12, 76, 83, 45],12).
f([69, 33, 25, 43, 66, 45, 92, 55, 13, 18, 18, 68, 4, 17, 83, 84, 18, 91, 66, 27, 99],66).
f([56, 25, 67, 3, 90, 76, 54, 45, 91, 95, 2, 12, 11, 76, 99, 44, 64, 62, 60, 53, 57, 41, 24, 59, 21],76).
f([47, 30, 75, 46, 96, 62, 74, 84, 96, 60, 43, 59, 22, 46, 43, 75, 79, 61, 81, 31, 47, 43, 1, 61, 18, 65, 24, 69],43).
f([57, 26, 90, 23, 72, 20, 32, 22, 35, 42, 51, 13, 87, 97, 50, 66, 49, 24, 20, 97, 45, 58, 31, 21, 31, 41, 87, 25, 47, 81, 33],20).
f([61, 14, 56, 100, 87, 92, 42, 98, 61, 33],61).
f([86, 1, 39, 28, 34, 50, 8, 75, 71, 77, 88, 66, 43, 10, 8, 80, 2, 93, 37, 91, 69, 100, 30, 51, 65, 96, 26, 15, 9, 2, 24, 71, 25, 87, 25, 90, 23],8).
f([77, 96, 77, 64, 57, 18, 101, 91, 80, 28, 54, 96, 13, 62, 101, 55, 25, 73, 68, 69, 52, 49, 75, 3, 1, 39, 30, 4, 87, 73, 34, 32, 40, 38, 16, 16, 8, 82, 83, 2, 30, 18, 3, 9, 11, 66, 83, 70, 57, 52],101).
f([6, 43, 63, 40, 70, 2, 89, 37, 83, 11, 89, 5],89).
f([90, 82, 40, 30, 57, 29, 4, 33, 68, 94, 101, 38, 82, 71, 87, 66, 7, 84, 55, 36, 32, 29, 22, 29, 8, 53, 74, 91, 93, 89, 87, 84, 43, 24, 7, 19, 71, 22, 90, 46, 28, 70, 98, 93, 34, 93, 18, 83, 11],22).
f([101, 69, 5, 57, 45, 3, 77, 101, 73, 25, 99, 31, 85, 43, 23, 41, 71, 20, 16, 15, 79, 32, 1, 19, 90, 82],101).
f([88, 55, 31, 59, 34, 98, 46, 72, 90, 61, 19, 78, 21, 46, 68, 10, 40, 33, 23, 26, 50, 94, 61, 74, 31, 39, 41, 17, 3, 56, 17, 86, 9, 98, 84, 17, 72, 37, 61, 53, 46, 27, 70],98).
f([50, 81, 99, 20, 73, 29, 24, 31, 49, 81, 44, 43, 94, 100, 72, 36, 29, 59],81).
f([70, 64, 40, 73, 64, 44, 8, 25, 16, 88, 1, 86, 22, 9, 64, 60, 18, 26, 58, 18],64).
f([90, 76, 63, 22, 22, 1, 80, 72, 55, 12, 80, 66, 93, 50, 52, 13, 76, 21, 31, 47, 23, 11, 19, 82, 50, 74, 67, 85],80).
:-end_in_pos.
:-begin_in_neg.
f([32, 15, 3, 28, 88, 49, 29, 36, 8, 32, 25, 22, 21, 82, 63, 55, 69, 1, 10, 42, 68, 90],25).
f([63, 85, 46, 83, 66],85).
f([58, 68, 43, 28, 39, 100, 83, 78, 44, 36, 77, 25, 89, 69, 83, 24, 99, 89, 29, 89, 21, 35, 90, 41, 98, 89, 3, 43, 74, 81, 15, 98, 8, 59, 82, 17, 22, 46, 87, 37, 50, 29, 21, 24, 100, 9, 56, 4],56).
f([61, 3, 86, 98, 60, 23, 90, 95, 60, 49, 43],3).
f([59, 50, 12, 6, 8, 57, 2, 24, 79, 11, 31, 43],59).
f([43, 37, 63, 18, 55, 37, 87, 19, 75, 69, 93, 44, 39, 26, 23, 100, 50, 53, 51, 32, 60, 32, 66, 91, 58, 39, 62, 57, 34, 76, 91, 48, 90, 15, 11, 24, 100, 9, 29, 14, 24, 73, 30],15).
f([20, 81, 101, 48, 7, 5, 31, 50, 89, 17, 37, 92, 70, 80, 57, 54, 38, 87, 92, 40, 84, 62, 25, 64, 99, 53, 37, 69, 11, 90, 76, 46, 4, 41, 20, 93, 46, 56, 20, 100, 82, 96, 73, 90, 31, 32],11).
f([93, 26, 99, 33, 24, 50, 31, 69, 15, 54, 10, 24, 84, 19, 32, 80, 6, 57, 97],99).
f([94, 73, 96, 65, 55, 91, 61, 32, 15, 47, 3, 34, 82, 27, 91, 79, 47, 20, 11, 23, 13, 27, 36, 43, 10, 51, 54, 28, 41, 33, 78, 84, 27, 18, 42, 83, 42],82).
f([83, 26, 1, 74, 12, 28, 76, 66, 93, 46, 67, 86, 28, 7, 70, 10, 98, 93, 23, 52, 49, 98, 82, 2, 3, 97, 58, 86, 63, 30, 12, 18, 90, 64, 31, 86, 59, 40, 65, 2, 88, 95, 77, 81, 80, 25, 84, 57],65).
f([24, 28, 38, 54, 76, 21, 4, 96, 92, 59, 91, 35, 88, 12, 25, 27, 71, 46, 16, 64, 44, 93, 9, 7, 11, 91, 32, 38, 72, 80, 89, 17, 18, 76, 3, 94, 50, 55, 65, 98],25).
f([84, 12, 49, 65, 29, 100, 49, 84, 33, 23, 93, 29, 58, 39, 18, 83, 73, 34, 93, 50],12).
f([19, 71, 40, 52, 12, 72, 15, 64, 72, 17, 25, 39, 2, 51, 71, 42, 35, 71, 6, 63, 45, 69, 6],40).
f([39, 29, 32, 31, 7, 24, 17, 47, 46, 11, 97, 88, 15, 95],17).
f([2, 11, 65, 54, 44, 90],11).
f([40, 89, 77, 16, 98, 91, 96, 84, 40, 7, 89, 3, 58, 80, 39, 61, 8, 31, 7, 63, 87, 63, 35, 30, 44, 17, 23, 30, 87, 25, 69, 45],16).
f([12, 83, 16, 1, 17, 96, 97, 32, 50, 21, 21, 86, 86, 79, 46, 87, 40, 56, 85, 100],79).
f([59, 84, 10, 72, 97, 50, 44, 10, 48, 58, 11, 87, 40, 15, 12, 34, 26, 32],72).
f([40, 37, 5, 51, 44, 45, 64, 48, 16, 59, 55, 97, 61, 73, 51, 86, 78, 73, 35, 14],44).
f([63, 19, 67, 83, 83, 95, 12],67).
:-end_in_neg.
