:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-element)).
:- modeb(*,f(+list,-element)).
:- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
:- determination(f/2,element/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,cons/3).
:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.

my_append(A,B,C):-
    append(A,[B],C).





c_0(0).
c_1(1).
c_2(2).
c_3(3).
c_4(4).
c_5(5).
c_6(6).
c_7(7).
c_8(8).
c_9(9).
c_10(10).
c_11(11).
c_12(12).
c_13(13).
c_14(14).
c_15(15).
c_16(16).
c_17(17).
c_18(18).
c_19(19).
c_20(20).
c_21(21).
c_22(22).
c_23(23).
c_24(24).
c_25(25).
c_26(26).
c_27(27).
c_28(28).
c_29(29).
c_30(30).
c_31(31).
c_32(32).
c_33(33).
c_34(34).
c_35(35).
c_36(36).
c_37(37).
c_38(38).
c_39(39).
c_40(40).
c_41(41).
c_42(42).
c_43(43).
c_44(44).
c_45(45).
c_46(46).
c_47(47).
c_48(48).
c_49(49).
c_50(50).
c_51(51).
c_52(52).
c_53(53).
c_54(54).
c_55(55).
c_56(56).
c_57(57).
c_58(58).
c_59(59).
c_60(60).
c_61(61).
c_62(62).
c_63(63).
c_64(64).
c_65(65).
c_66(66).
c_67(67).
c_68(68).
c_69(69).
c_70(70).
c_71(71).
c_72(72).
c_73(73).
c_74(74).
c_75(75).
c_76(76).
c_77(77).
c_78(78).
c_79(79).
c_80(80).
c_81(81).
c_82(82).
c_83(83).
c_84(84).
c_85(85).
c_86(86).
c_87(87).
c_88(88).
c_89(89).
c_90(90).
c_91(91).
c_92(92).
c_93(93).
c_94(94).
c_95(95).
c_96(96).
c_97(97).
c_98(98).
c_99(99).
c_100(100).
:-end_bg.
:-begin_in_pos.
f([44, 38, 97, 4, 69, 88, 24, 56, 75, 71, 1, 67, 64, 57, 86, 29, 47, 21, 44, 95, 24, 84, 68, 29, 4],24).
f([82, 81, 99, 80, 80, 92, 80, 26, 91, 22, 53, 95, 62, 11, 99, 88, 39, 52, 63, 82, 89, 30, 12, 41, 42, 36, 61, 89, 57, 43, 81, 70, 45, 39, 69, 72, 21, 53, 48, 18, 50, 17, 83, 101, 56, 38, 92, 12, 98, 87, 13, 54],80).
f([16, 53, 100, 11, 92, 58, 74, 76, 16, 89, 24, 63, 74, 101, 27, 15, 34, 1, 52, 13, 81, 65, 38, 76, 32, 100],100).
f([15, 43, 39, 24, 40, 3, 18, 43, 79, 2, 19, 32, 17, 49, 19, 51, 51, 15, 28, 24, 101, 58, 15, 88, 88, 13, 21, 53, 67, 85, 60, 7, 50, 29, 4, 72, 12, 10, 80, 23, 97, 23, 31, 46, 55, 90, 21, 93],15).
f([20, 8, 56, 87, 72, 8, 88, 69, 91, 44, 76, 101, 27, 43, 32, 87, 32, 77, 98, 76, 51, 88],32).
f([56, 14, 94, 101, 84, 93, 75, 95, 6, 41, 89, 27, 20, 5, 18, 58, 72, 97, 58, 2, 73, 30, 16, 47, 3, 62, 29, 7, 13, 78, 96, 45, 46, 96, 40, 74, 34, 58, 41, 28, 91, 67, 78, 83, 19, 20, 99],58).
f([17, 34, 6, 37, 74, 33, 60, 100, 92, 11, 81, 29, 70, 18, 25, 85, 31, 81, 20, 98, 72, 68, 65, 59, 61, 47, 84, 4, 74, 20, 75, 26, 72, 13, 21, 49, 44, 82, 8, 4, 62, 62],81).
f([72, 32, 32, 47, 7, 23, 97, 4, 14, 18, 10, 19, 59, 62, 24, 13, 26, 24, 44, 98, 3, 25, 54, 80, 55, 97, 5, 42, 10, 42, 33, 84, 10, 40, 79, 82, 51, 7, 87, 20, 2, 13, 72, 5, 77, 40, 4, 85, 67, 77, 75, 69],40).
f([29, 11, 7, 74, 31, 55, 70, 8, 10, 17, 77, 21, 7, 31, 23, 44, 49, 84, 40, 22, 31, 10, 80, 55, 61, 53, 44, 44, 85, 79, 59, 28, 26, 21],31).
f([58, 55, 101, 35, 35, 70, 4],35).
f([69, 90, 28, 53, 10, 54, 70, 23, 34, 72, 46, 28, 72, 78, 24, 1, 67, 100, 61, 11, 67, 32, 73, 22, 101, 10, 44, 96, 42],72).
f([19, 67, 13, 47, 82, 20, 83, 56, 46, 20, 63, 50, 10, 71, 13, 90, 89, 6, 1, 74, 83, 70, 74, 43, 65, 16, 76, 52, 27, 90, 6, 28, 8, 94, 59, 63, 41, 21, 33, 12, 28, 57, 32, 61, 8, 41, 75, 31, 63, 39, 52, 45],13).
f([26, 1, 18, 24, 96, 21, 18, 17, 83],18).
f([99, 44, 4, 97, 94, 15, 52, 66, 61, 2, 33, 90, 94, 65, 6, 22, 84, 18, 92, 30, 13, 98, 45, 73, 38, 85, 2, 66, 26, 94, 26, 69, 41, 17],26).
f([54, 33, 8, 80, 24, 4, 54, 3, 39, 60, 42],54).
f([5, 58, 5, 47],5).
f([58, 30, 24, 24, 24, 31, 95, 70, 69, 27, 33, 95, 93, 78, 5, 54, 39],24).
f([63, 13, 76, 53, 46, 53, 68, 29, 63, 39, 88, 63, 22, 75, 45, 13, 79, 77, 65, 4, 15, 93, 97, 33, 99, 50, 101, 55, 73, 54, 66, 50, 14, 6],13).
f([39, 83, 3, 94, 55, 53, 79, 45, 47, 97, 56, 94, 47, 66, 62],47).
f([94, 53, 73, 86, 42, 32, 80, 94, 40, 72, 20, 99, 22, 87, 36, 72, 49, 56, 86, 4, 68, 94, 32, 75, 10, 1, 18, 9, 90, 64, 65, 48, 4, 63, 71, 18, 94, 1, 74, 80, 73, 25, 5, 52, 92, 63, 50, 30, 63],1).
:-end_in_pos.
:-begin_in_neg.
f([11, 67, 100, 87, 29, 83, 79, 5, 35, 62, 38, 50, 61, 99, 98, 58, 81, 75, 92, 22, 30, 36, 90, 87, 14],90).
f([64, 56, 79, 99, 67, 65, 39, 41, 59, 51, 82, 31, 27, 53, 11, 6, 53, 63, 85, 34, 56, 50, 73, 54, 75, 36, 87, 61, 5, 77, 39, 2, 75, 40, 30, 20, 47, 12, 58, 62],2).
f([71, 37, 95, 2, 8, 80, 100],95).
f([69, 20, 63, 91, 55, 35, 32, 70, 75, 58, 5, 52, 88, 10, 39, 71, 70, 62, 27, 18, 83, 36, 81, 93, 25, 97, 21, 25, 16, 86, 56, 70, 69, 19, 30, 2, 15],93).
f([61, 34, 93, 48, 89, 8, 85, 71, 42, 56, 32, 8, 49, 23, 84, 19, 43, 23, 77, 75, 63, 69, 37, 32, 5, 64, 13, 57, 41, 101, 95, 62, 44, 13, 41, 94, 41, 24, 33, 78],42).
f([89, 101, 82, 18, 60, 69, 51, 17, 8, 69],17).
f([81, 49, 35, 101, 76, 57, 76, 83, 32, 20, 63, 39, 3, 26, 54, 90, 43, 88, 7, 96, 30, 90, 12, 83, 25, 57, 31, 84, 29, 49, 20, 5, 8, 72, 96, 47, 56],7).
f([34, 7, 101, 70, 42, 86, 26],86).
f([26, 68, 48, 97, 69, 25, 36, 65, 8, 73, 99, 98, 22, 8, 12, 85, 62, 3, 9, 10, 11, 30, 48, 54, 37, 92, 26, 75, 64, 76, 77, 98, 81],12).
f([22, 70, 80, 22, 77, 26, 73, 58, 68, 82],68).
f([50, 57, 80, 83, 47, 34, 94, 20, 2, 64, 78, 27, 56, 53, 4, 28, 68, 63, 47, 86, 68, 47, 32, 54, 30, 24, 69, 92, 66, 50, 59],64).
f([3, 92, 60, 64, 32, 101, 97, 79, 78, 31, 80, 10, 68, 84, 17, 31, 5, 18, 93, 53, 80, 39, 81, 16, 60, 17],18).
f([63, 57, 16, 6, 7, 76, 82, 9, 73, 45, 17, 38, 27, 84, 37, 21, 72, 25, 37, 77, 58, 92, 41, 57, 33, 3, 85, 3, 85],45).
f([88, 78, 88, 45, 44, 17, 50, 40, 21, 13, 25, 55, 8, 41, 77, 81, 42, 34, 21, 97, 89, 29, 1, 11, 64, 71, 95, 88, 73, 89, 35, 37, 99],37).
f([76, 96, 42, 75, 68, 53, 84, 97, 18, 11, 80, 22, 82, 1, 81, 12, 10, 1, 54, 91, 93, 11, 51],53).
f([85, 27, 75, 83, 45, 3, 23, 88, 90, 43, 49, 22],43).
f([17, 70, 12, 71, 10, 54, 43],43).
f([82, 98, 51, 4, 17, 55, 95, 61, 21, 99, 4, 62, 32, 66, 71, 61, 33, 73, 48, 48, 1, 67, 45, 49, 82, 54, 72, 17, 40, 80, 71, 32, 7, 46, 11, 12, 36, 97, 100, 75, 77, 18, 6, 68, 24, 75, 82, 58, 39],55).
f([76, 55, 84, 24, 99, 5, 26, 59, 43, 38, 34, 58, 68, 27, 25, 79, 26, 61, 21, 19, 54, 63, 40, 57, 101, 80, 77, 31, 25],99).
f([59, 32, 54, 55, 99, 7, 87, 66, 7, 4, 75, 4, 34, 65, 86, 67, 61, 39, 83, 53, 73, 11, 52, 43, 30, 10, 48, 83, 29, 73, 87, 18, 28, 17, 18, 4, 32, 71, 74, 63, 98, 87, 63, 8, 65, 10, 76, 72, 33, 72],98).
:-end_in_neg.
