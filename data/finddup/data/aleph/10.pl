:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-element)).
:- modeb(*,f(+list,-element)).
:- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
:- determination(f/2,element/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
%% :- determination(f/2,cons/3).
:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.

my_append(A,B,C):-
    append(A,[B],C).





c_0(0).
c_1(1).
c_2(2).
c_3(3).
c_4(4).
c_5(5).
c_6(6).
c_7(7).
c_8(8).
c_9(9).
c_10(10).
c_11(11).
c_12(12).
c_13(13).
c_14(14).
c_15(15).
c_16(16).
c_17(17).
c_18(18).
c_19(19).
c_20(20).
c_21(21).
c_22(22).
c_23(23).
c_24(24).
c_25(25).
c_26(26).
c_27(27).
c_28(28).
c_29(29).
c_30(30).
c_31(31).
c_32(32).
c_33(33).
c_34(34).
c_35(35).
c_36(36).
c_37(37).
c_38(38).
c_39(39).
c_40(40).
c_41(41).
c_42(42).
c_43(43).
c_44(44).
c_45(45).
c_46(46).
c_47(47).
c_48(48).
c_49(49).
c_50(50).
c_51(51).
c_52(52).
c_53(53).
c_54(54).
c_55(55).
c_56(56).
c_57(57).
c_58(58).
c_59(59).
c_60(60).
c_61(61).
c_62(62).
c_63(63).
c_64(64).
c_65(65).
c_66(66).
c_67(67).
c_68(68).
c_69(69).
c_70(70).
c_71(71).
c_72(72).
c_73(73).
c_74(74).
c_75(75).
c_76(76).
c_77(77).
c_78(78).
c_79(79).
c_80(80).
c_81(81).
c_82(82).
c_83(83).
c_84(84).
c_85(85).
c_86(86).
c_87(87).
c_88(88).
c_89(89).
c_90(90).
c_91(91).
c_92(92).
c_93(93).
c_94(94).
c_95(95).
c_96(96).
c_97(97).
c_98(98).
c_99(99).
c_100(100).
:-end_bg.
:-begin_in_pos.
f([44, 43, 33, 51, 26, 14, 72, 79, 34, 56, 30, 74, 9, 93, 9, 14, 34, 28, 24, 50, 6, 35, 56, 59],56).
f([3, 39, 59, 3, 26, 29, 96, 48, 44, 12, 81, 48, 65, 40, 65, 80, 63, 38, 17, 83, 9, 59, 48],48).
f([59, 5, 39, 67, 34, 77, 101, 50, 97, 58, 79, 1, 93, 91, 50, 33, 5, 3, 2, 55, 83, 58, 69, 13, 38, 79, 17, 23, 4, 14, 77, 76, 89, 46, 76, 32, 49, 52, 33],79).
f([24, 59, 36, 46, 93, 55, 54, 101, 51, 1, 78, 73, 47, 35, 2, 65, 99, 60, 85, 19, 65, 40, 55, 37, 75, 15, 78, 27, 21, 38, 28, 20, 60, 64, 5, 56, 5, 47, 52, 16, 66, 2, 29],5).
f([44, 87, 58, 63, 30, 33, 19, 52, 40, 21, 80, 88, 94, 54, 87, 35, 60, 89, 61, 56, 17, 98, 5, 37, 80, 88, 40, 4, 41, 9, 9, 75, 10, 10, 24, 62, 23, 28, 98, 16, 84],98).
f([23, 6, 24, 81, 27, 11, 34, 6, 7, 34, 16, 84, 45, 27, 56, 95, 31, 7, 10, 76, 80, 14, 93, 18, 31, 12, 10, 97, 8, 76, 13, 46, 96],6).
f([62, 7, 20, 42, 62],62).
f([8, 8, 78],8).
f([31, 37, 23, 45, 84, 9, 84, 30, 74, 12, 9, 31, 32, 76, 51, 95, 50, 54, 95, 16, 6, 3, 73, 35, 50, 69, 55, 66, 63, 90, 3, 69, 19, 68, 27, 12, 71, 1, 92, 11, 27, 71, 17, 23, 26, 53, 45, 84, 97, 23, 73],23).
f([40, 38, 82, 101, 49, 51, 41, 5, 100, 5, 75, 63, 29, 99, 42, 78, 77, 81, 40, 75, 88, 101, 101, 80, 94, 90, 61, 4, 72, 96, 83, 27, 40, 53, 51, 71, 32, 44],75).
f([65, 34, 65, 66, 56, 98, 14, 65, 8, 69, 11, 69, 62, 31, 31, 6, 93, 3, 98, 30, 53, 20, 92, 95],65).
f([31, 47, 4, 61, 30, 99, 100, 63, 8, 71, 42, 61, 76, 79, 93, 79, 59, 50, 12, 5, 1, 42, 61, 97, 60, 84, 50, 22],50).
f([35, 24, 44, 54, 44, 54, 8, 96, 68, 11, 79, 65, 22, 29, 65, 17, 70, 21, 94, 92, 59, 82, 76, 66, 36, 94, 31, 75, 19, 5, 69, 43, 54, 7],54).
f([99, 18, 87, 76, 89, 34, 36, 95, 72, 19, 19, 33, 38, 28, 74, 23, 85, 60, 73, 28, 37, 62, 37, 24, 8, 93, 26, 93, 52, 58, 7, 94, 72, 92, 59, 75, 77, 57, 86, 7, 60, 32],93).
f([63, 42, 4, 84, 32, 93, 12, 38, 17, 50, 33, 81, 85, 5, 18, 98, 18, 15, 34, 86, 4, 91, 58, 5, 32, 32],32).
f([68, 36, 90, 83, 94, 13, 69, 5, 52, 86, 19, 4, 37, 92, 23, 33, 79, 36, 13, 29, 92, 41, 10, 75, 39, 92, 31, 38, 46, 101, 32, 15, 65, 55, 100, 25, 6, 6, 6, 1, 17, 96, 26, 98, 7, 81, 65, 22, 77],92).
f([60, 100, 54, 91, 4, 37, 32, 54, 97, 36, 2, 33, 28, 100, 73, 17, 35, 39, 8, 24, 60, 76, 100, 95, 23, 62, 90, 101, 36],36).
f([14, 17, 15, 53, 94, 21, 22, 59, 98, 3, 77, 92, 57, 58, 47, 51, 98, 53, 2, 98, 14, 14, 24, 11, 52, 60, 25, 92, 42, 26, 49, 88, 20, 98, 84, 40, 25, 48],92).
f([76, 29, 62, 77, 99, 69, 13, 76, 39],76).
f([9, 20, 100, 46, 50, 39, 27, 63, 61, 100, 58, 16, 28, 25],100).
:-end_in_pos.
:-begin_in_neg.
f([89, 69, 47, 48, 6, 49, 27, 44, 5, 73, 30, 41, 86, 33, 26, 71, 19, 1, 89, 16, 72, 101, 82, 72, 56, 7, 90, 72, 16, 99, 37, 32, 74, 89, 9, 90, 58, 14],6).
f([29, 9, 47, 62, 85, 46, 89, 86, 24, 6, 44, 67, 97, 63, 96, 93, 30, 49, 42, 85, 31, 92, 43, 95, 93, 66, 36, 9, 54],92).
f([86, 73, 16, 58, 49, 23, 42, 42, 18, 93, 90, 16, 55, 85, 17, 65, 28, 24, 56, 23, 13, 62, 27, 60, 63, 64, 24, 46, 99, 10],56).
f([101, 59, 75, 81, 37, 30, 16, 49, 79, 24, 10, 68, 33, 36, 25, 65, 4, 1, 10, 96, 12, 64, 49, 12, 33],4).
f([75, 62, 19, 83, 79, 9, 18, 20, 4, 61, 81, 41, 23, 24, 82, 72, 57, 15, 8, 31, 79, 74, 66],4).
f([2, 66, 78, 80, 62, 95, 51, 78, 100, 1, 55, 60, 39, 92, 67, 89, 6, 26, 68, 23, 48, 76, 60, 30, 21, 94, 101, 4, 15, 16, 26, 71, 25, 22, 71, 77, 45, 6, 61, 24, 35, 10, 32],92).
f([64, 36, 95, 60, 33, 93, 61, 87, 98, 68, 55, 16, 100, 85, 82, 3, 84, 11, 20, 46, 11, 6, 40, 19, 61, 77, 80, 97, 68, 16, 62, 37, 60, 84, 101, 91, 56, 49, 59, 22],101).
f([79, 80, 98, 63, 41, 3, 11, 96, 17, 31, 56, 51, 5, 96, 86],98).
f([30, 68, 58, 49, 83, 28, 46, 28, 1, 15, 42, 77, 73, 15, 101, 50, 96, 37, 39, 51, 94, 76, 99, 52, 23, 8, 18, 50, 70, 24, 85, 57, 20, 67, 53, 54, 83, 50, 28, 73],58).
f([46, 78, 18],78).
f([67, 98, 45, 24, 70, 41, 91, 97, 3, 66, 81, 37, 32, 45, 78, 94],24).
f([1, 4, 30, 84, 15, 53, 94, 32, 99],1).
f([73, 27, 50, 93, 87, 43, 54, 20, 67, 10, 36, 23, 12, 72, 6, 5, 29, 50, 18, 45, 91, 66, 14, 90, 42, 59, 23, 27, 67, 92, 62, 4, 96, 83, 81, 58, 79, 36, 49, 85, 56, 35],6).
f([76, 88, 38, 46, 26, 49, 48, 53, 100, 46, 70, 44, 2, 8, 18, 95, 85, 40, 59, 13, 17, 16, 81, 78, 8, 76],53).
f([3, 71, 67, 61, 36, 11, 88, 49, 56, 40, 7, 36, 55, 56],61).
f([60, 69, 82, 23, 100, 73, 9, 23, 31, 46, 26, 38, 21, 6, 26, 35, 11, 71, 82, 15, 77, 33, 52, 74, 16, 1, 11, 19, 37, 72, 89, 47, 76, 51, 40, 67, 80],72).
f([25, 6, 13, 15, 19, 24, 81, 68, 29, 52, 4, 37, 59, 94, 31, 97, 60, 45, 21, 64, 26, 22, 20, 69, 80, 91, 43, 31, 54, 48, 95, 9, 2, 92, 80, 10, 38, 22, 52, 15, 96, 70],59).
f([48, 60, 2, 17, 33, 14, 11, 48, 80, 55, 38, 8, 26, 87, 95, 8, 26, 53, 60, 28, 71, 80, 81, 98, 49, 61, 92, 15, 83, 83, 9, 22, 55, 81, 45, 20, 79, 14, 45, 100],53).
f([74, 97, 84, 16, 64, 85, 95, 50, 36, 46, 88, 83, 79, 36, 27],50).
f([39, 91, 35, 70, 8, 40, 73, 68, 37, 38, 47, 3, 33, 29, 41, 53, 85, 14, 95, 98, 21, 1, 94, 53, 101, 45, 63, 14, 15, 48, 50, 33, 69, 24, 13, 23, 18],73).
:-end_in_neg.
